<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>mattische/blog on mattische/blog </title>
      <generator uri="https://gohugo.io">Hugo</generator>
    <link>https://mattische.github.io/blog/</link>
    <language>en-us</language>
    
    
    <updated>Wed, 21 Feb 2018 09:32:21 CET</updated>
    
    <item>
      <title>pipenv</title>
      <link>https://mattische.github.io/blog/post/pipenv/</link>
      <pubDate>Wed, 21 Feb 2018 09:32:21 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/pipenv/</guid>
      <description>pipenv is a tool like npm - it creates, per project, an isolated virtual env.
 Pipenv is a tool that aims to bring the best of all packaging worlds (bundler, composer, npm, cargo, yarn, etc.) to the Python world. Windows is a first–class citizen, in our world. It automatically creates and manages a virtualenv for your projects, as well as adds/removes packages from your Pipfile as you install/uninstall packages.</description>
    </item>
    
    <item>
      <title>ssh</title>
      <link>https://mattische.github.io/blog/post/ssh/</link>
      <pubDate>Tue, 20 Feb 2018 10:02:58 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/ssh/</guid>
      <description>ssh connect $ ssh userNameOnServer@&amp;lt;IP_ADDRESS_OF_SERVER&amp;gt;  connects via ssh to the server on port 22. If the port is not 22, add portnumber via argument -p;
$ ssh userNameOnServer@&amp;lt;IP_ADDRESS_OF_SERVER&amp;gt; -p &amp;lt;PORT_NBR&amp;gt;  generate ssh key Generate your key;
 $ ssh-keygen -t rsa  Follow the prompts - choose default location where keys will be saved.
A ~/.ssh directory hase been created with your keys in it. The .pub is your public key an the other file is your private key.</description>
    </item>
    
    <item>
      <title>Spark cluster how-to</title>
      <link>https://mattische.github.io/blog/post/spark_cluster/</link>
      <pubDate>Mon, 12 Feb 2018 11:40:21 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/spark_cluster/</guid>
      <description>This is how to get a Spark cluster running, with one master and one slave (worker). I used a droplet on digital ocean (master) and one local vagrant machine (slave).
spark in vagrant References: thank you Bin
kulwant singh
austin ouyang  Installation on all nodes (master and slaves) For the slave (worker) I used a vagrant machine as in my previous post.
For the master I used a droplet on Digital Ocean.</description>
    </item>
    
    <item>
      <title>Install jupyter with spark</title>
      <link>https://mattische.github.io/blog/post/spark_jupyter_installation/</link>
      <pubDate>Mon, 05 Feb 2018 11:35:09 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/spark_jupyter_installation/</guid>
      <description>For Spark installation in a vagrant instance, see previous post.  Prerequisites You should have a working Spark installation inside a vagrant machine (Ubuntu Xenial 16.04). See previous post for doing that.

Provision vagrant - expose ports In your folder, where your vagrant-machine is located; edit your Vagrantfile
We will expose the ports for Jupyter and Spark to the host (you physical machine that runs vagrant).
We will expose 2 ports - 8888 for the Jupyter notebooks and 7077 for the Spark master.</description>
    </item>
    
    <item>
      <title>Spark installation in vagrant</title>
      <link>https://mattische.github.io/blog/post/spark_installation_vagrant/</link>
      <pubDate>Fri, 02 Feb 2018 13:45:29 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/spark_installation_vagrant/</guid>
      <description>This guide is how to install Spark, single node, in a Vagrant virtual machine. Reference: thank you Bin  Ubuntu xenial This was done inside a vagrant machine; ubuntu xenial (16.04).
 $ vagrant init envimation/ubuntu-xenial $ vagrant up $ vagrant ssh 
and you&amp;rsquo;re in.
Install openjdk $ sudo apt-get update &amp;amp;&amp;amp; sudo apt-get install -y openjdk-8-jdk &amp;amp;&amp;amp; ll /usr/lib/jvm/ &amp;amp;&amp;amp; ll /usr/bin/java &amp;amp;&amp;amp; ll /etc/alternatives/java &amp;amp;&amp;amp; sudo update-alternatives &amp;ndash;config java</description>
    </item>
    
    <item>
      <title>Node Passport Login</title>
      <link>https://mattische.github.io/blog/post/node-passport-login/</link>
      <pubDate>Mon, 27 Nov 2017 13:44:13 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/node-passport-login/</guid>
      <description>nodejs with passport Creating a web application often involves some sort of login and user management. This is a short example of using nodejs with passport&amp;rsquo;s built in strategies for local (with mongodb) and google OAuth2.
Passport, http://www.passportjs.org/, have strategies for almost every provider there is. Very handy.
I won&amp;rsquo;t list all source code, you&amp;rsquo;ll find that in the Github repo. Instead, some highlights are shown below.
Here is the Github repo with complete sourcecode.</description>
    </item>
    
    <item>
      <title>tmux</title>
      <link>https://mattische.github.io/blog/post/tmux/</link>
      <pubDate>Thu, 23 Nov 2017 14:57:35 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/tmux/</guid>
      <description>Isn&amp;rsquo;t tmux just wonderful?
Start sessions with processes and them attach to them at a later time.
See this guide; A Quick and Easy Guide to tmux

Memo;
 $ tmux #start new session
$ tmux ls #list available sessions
$ tmux attach -t 0 #attach to session 0, listed from tmux ls
$ tumux kill-session -t 0 #kill session 0 

Key bindings;
 C-b % #split pane vertically C-b &#34;</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://mattische.github.io/blog/contact/</link>
      <pubDate>Wed, 22 Nov 2017 13:04:04 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/contact/</guid>
      <description>Github | Twitter</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://mattische.github.io/blog/about/</link>
      <pubDate>Wed, 22 Nov 2017 12:59:43 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/about/</guid>
      <description>Hi!
I am mattische. Im into programming (mainly FOSS, open sourse), dev ops and IoT/WoT. And, music is a passion.
I have an old blog here.</description>
    </item>
    
    <item>
      <title>Vagrant</title>
      <link>https://mattische.github.io/blog/post/vagrant/</link>
      <pubDate>Tue, 21 Nov 2017 10:12:07 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/vagrant/</guid>
      <description>Vagrant is a pretty nifty tool in the sense that have your own virtual development env on your machine. For example, you can simulate your production env.
You&amp;rsquo;ll need some basic linux knowledge.
For windows;
Download and install vagrant and virtualbox;
https://www.vagrantup.com/
https://www.virtualbox.org/
It&amp;rsquo;s a good idea to create a vagrant account. With it, you can save your own boxes/configurations. Go to https://app.vagrantup.com/ and create an account.
After installation the $ vagrant</description>
    </item>
    
    <item>
      <title>ssh Tunneling</title>
      <link>https://mattische.github.io/blog/post/ssh-tunneling/</link>
      <pubDate>Mon, 20 Nov 2017 13:57:59 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/ssh-tunneling/</guid>
      <description>Sorry, this is in swedish only Reverse SSH tunneling / Remote port forwarding  Problem:
du kan inte komma åt en dator utifrån (den befinner sig förmodligen bakom ett NAT (Network Address Translator). Lösning:
skapa en ssh tunnel FRÅN oåtkomlig maskin via en åtkomlig maskin. Krävs:
SSH deamon (sshd) och SSH klient på alla maskinerna.  Konfiguration: På bägge maskinerna krävs en SSH-server (ssh-deamon). Lägg till 2 attribut sist i sshd_config:</description>
    </item>
    
    <item>
      <title>First</title>
      <link>https://mattische.github.io/blog/post/first/</link>
      <pubDate>Mon, 20 Nov 2017 13:16:26 CET</pubDate>
      
      <guid>https://mattische.github.io/blog/post/first/</guid>
      <description>first post.
well, ok. welcome.</description>
    </item>
    
  </channel>
</rss>

